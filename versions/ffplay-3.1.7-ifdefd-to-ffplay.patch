--- ffplay-3.1.7-ifdefd.c	2016-08-04 09:02:46.000000000 +0200
+++ ffplay.c	2016-08-04 09:02:16.000000000 +0200
@@ -28,7 +28,7 @@
 //#define SUBTITLE
 //#define EXTCLOCK
 //#define FRAMEDROP
-#undef CONFIG_AVFILTER
+//#undef CONFIG_AVFILTER
 #undef CONFIG_RTSP_DEMUXER
 #undef CONFIG_AVDEVICE
 #include <inttypes.h>
@@ -346,16 +346,24 @@
 
     char *filename;
     int width, height, xleft, ytop;
+    AVRational frame_rate;
     int step;
 
 #if CONFIG_AVFILTER
     int vfilter_idx;
     AVFilterContext *in_video_filter;   // the first filter in the video chain
     AVFilterContext *out_video_filter;  // the last filter in the video chain
+    AVFilterGraph *vgraph;              // video filter graph
+    int last_w;
+    int last_h;
+    enum AVPixelFormat last_format;
+    int last_vserial;
+    int last_vfilter_idx;
 #ifdef AUDIO
     AVFilterContext *in_audio_filter;   // the first filter in the audio chain
     AVFilterContext *out_audio_filter;  // the last filter in the audio chain
     AVFilterGraph *agraph;              // audio filter graph
+    int last_aserial;
 #endif
 #endif
 
@@ -2090,7 +2098,7 @@
     return ret;
 }
 
-static int configure_video_filters(AVFilterGraph *graph, VideoState *is, const char *vfilters, AVFrame *frame)
+static int configure_video_filters(VideoState *is, const char *vfilters, AVFrame *frame)
 {
     static const enum AVPixelFormat pix_fmts[] = { AV_PIX_FMT_YUV420P, AV_PIX_FMT_NONE };
     char sws_flags_str[512] = "";
@@ -2101,6 +2109,10 @@
     AVRational fr = av_guess_frame_rate(is->ic, is->video_st, NULL);
     AVDictionaryEntry *e = NULL;
 
+    avfilter_graph_free(&is->vgraph);
+    if (!(is->vgraph = avfilter_graph_alloc()))
+        return AVERROR(ENOMEM);
+
     while ((e = av_dict_get(sws_dict, "", e, AV_DICT_IGNORE_SUFFIX))) {
         if (!strcmp(e->key, "sws_flags")) {
             av_strlcatf(sws_flags_str, sizeof(sws_flags_str), "%s=%s:", "flags", e->value);
@@ -2110,7 +2122,7 @@
     if (strlen(sws_flags_str))
         sws_flags_str[strlen(sws_flags_str)-1] = '\0';
 
-    graph->scale_sws_opts = av_strdup(sws_flags_str);
+    is->vgraph->scale_sws_opts = av_strdup(sws_flags_str);
 
     snprintf(buffersrc_args, sizeof(buffersrc_args),
              "video_size=%dx%d:pix_fmt=%d:time_base=%d/%d:pixel_aspect=%d/%d",
@@ -2123,12 +2135,12 @@
     if ((ret = avfilter_graph_create_filter(&filt_src,
                                             avfilter_get_by_name("buffer"),
                                             "ffplay_buffer", buffersrc_args, NULL,
-                                            graph)) < 0)
+                                            is->vgraph)) < 0)
         goto fail;
 
     ret = avfilter_graph_create_filter(&filt_out,
                                        avfilter_get_by_name("buffersink"),
-                                       "ffplay_buffersink", NULL, NULL, graph);
+                                       "ffplay_buffersink", NULL, NULL, is->vgraph);
     if (ret < 0)
         goto fail;
 
@@ -2144,7 +2156,7 @@
                                                                              \
     ret = avfilter_graph_create_filter(&filt_ctx,                            \
                                        avfilter_get_by_name(name),           \
-                                       "ffplay_" name, arg, NULL, graph);    \
+                                       "ffplay_" name, arg, NULL, is->vgraph);    \
     if (ret < 0)                                                             \
         goto fail;                                                           \
                                                                              \
@@ -2176,13 +2188,15 @@
         }
     }
 
-    if ((ret = configure_filtergraph(graph, vfilters, filt_src, last_filter)) < 0)
+    if ((ret = configure_filtergraph(is->vgraph, vfilters, filt_src, last_filter)) < 0)
         goto fail;
 
     is->in_video_filter  = filt_src;
     is->out_video_filter = filt_out;
 
 fail:
+    if (ret < 0)
+        avfilter_graph_free(&is->vgraph);
     return ret;
 }
 
@@ -2266,31 +2280,18 @@
 #endif  /* CONFIG_AVFILTER */
 
 #ifdef AUDIO
-static int audio_thread(void *arg)
+static int audio_thread_iter(VideoState *is, AVFrame *frame)
 {
-    VideoState *is = arg;
-    AVFrame *frame = av_frame_alloc();
-    Frame *af;
-#if CONFIG_AVFILTER
-    int last_serial = -1;
-    int64_t dec_channel_layout;
-    int reconfigure;
-#endif
-    int got_frame = 0;
-    AVRational tb;
-    int ret = 0;
-
-    if (!frame)
-        return AVERROR(ENOMEM);
-
-    do {
+    {
+        int ret = 0;
+        int got_frame;
         if ((got_frame = decoder_decode_frame(&is->auddec, frame, NULL)) < 0)
-            goto the_end;
+            return -1;
 
         if (got_frame) {
-                tb = (AVRational){1, frame->sample_rate};
-
 #if CONFIG_AVFILTER
+                int reconfigure;
+                int64_t dec_channel_layout;
                 dec_channel_layout = get_valid_channel_layout(frame->channel_layout, av_frame_get_channels(frame));
 
                 reconfigure =
@@ -2298,7 +2299,7 @@
                                    frame->format, av_frame_get_channels(frame))    ||
                     is->audio_filter_src.channel_layout != dec_channel_layout ||
                     is->audio_filter_src.freq           != frame->sample_rate ||
-                    is->auddec.pkt_serial               != last_serial;
+                    is->auddec.pkt_serial               != is->last_aserial;
 
                 if (reconfigure) {
                     char buf1[1024], buf2[1024];
@@ -2306,27 +2307,30 @@
                     av_get_channel_layout_string(buf2, sizeof(buf2), -1, dec_channel_layout);
                     av_log(NULL, AV_LOG_DEBUG,
                            "Audio frame changed from rate:%d ch:%d fmt:%s layout:%s serial:%d to rate:%d ch:%d fmt:%s layout:%s serial:%d\n",
-                           is->audio_filter_src.freq, is->audio_filter_src.channels, av_get_sample_fmt_name(is->audio_filter_src.fmt), buf1, last_serial,
+                           is->audio_filter_src.freq, is->audio_filter_src.channels, av_get_sample_fmt_name(is->audio_filter_src.fmt), buf1, is->last_aserial,
                            frame->sample_rate, av_frame_get_channels(frame), av_get_sample_fmt_name(frame->format), buf2, is->auddec.pkt_serial);
 
                     is->audio_filter_src.fmt            = frame->format;
                     is->audio_filter_src.channels       = av_frame_get_channels(frame);
                     is->audio_filter_src.channel_layout = dec_channel_layout;
                     is->audio_filter_src.freq           = frame->sample_rate;
-                    last_serial                         = is->auddec.pkt_serial;
+                    is->last_aserial                    = is->auddec.pkt_serial;
 
                     if ((ret = configure_audio_filters(is, afilters, 1)) < 0)
-                        goto the_end;
+                        return ret;
                 }
 
             if ((ret = av_buffersrc_add_frame(is->in_audio_filter, frame)) < 0)
-                goto the_end;
+                return ret;
 
             while ((ret = av_buffersink_get_frame_flags(is->out_audio_filter, frame, 0)) >= 0) {
-                tb = is->out_audio_filter->inputs[0]->time_base;
+                AVRational tb = is->out_audio_filter->inputs[0]->time_base;
+#else
+                AVRational tb = (AVRational){1, frame->sample_rate};
 #endif
+                Frame *af;
                 if (!(af = frame_queue_peek_writable(&is->sampq)))
-                    goto the_end;
+                    return -1;
 
                 af->pts = (frame->pts == AV_NOPTS_VALUE) ? NAN : frame->pts * av_q2d(tb);
                 af->pos = av_frame_get_pkt_pos(frame);
@@ -2344,6 +2348,21 @@
                 is->auddec.finished = is->auddec.pkt_serial;
 #endif
         }
+        return ret;
+    }
+}
+
+static int audio_thread(void *arg)
+{
+    VideoState *is = arg;
+    AVFrame *frame = av_frame_alloc();
+    int ret = 0;
+
+    if (!frame)
+        return AVERROR(ENOMEM);
+
+    do {
+        ret = audio_thread_iter(is, frame);
     } while (ret >= 0 || ret == AVERROR(EAGAIN) || ret == AVERROR_EOF);
  the_end:
 #if CONFIG_AVFILTER
@@ -2365,84 +2384,56 @@
     return 0;
 }
 
-static int video_thread(void *arg)
+static int video_thread_iter(VideoState *is, AVFrame *frame)
 {
-    VideoState *is = arg;
-    AVFrame *frame = av_frame_alloc();
-    double pts;
-    double duration;
-    int ret;
-    AVRational tb = is->video_st->time_base;
-    AVRational frame_rate = av_guess_frame_rate(is->ic, is->video_st, NULL);
-
-#if CONFIG_AVFILTER
-    AVFilterGraph *graph = avfilter_graph_alloc();
-    AVFilterContext *filt_out = NULL, *filt_in = NULL;
-    int last_w = 0;
-    int last_h = 0;
-    enum AVPixelFormat last_format = -2;
-    int last_serial = -1;
-    int last_vfilter_idx = 0;
-    if (!graph) {
-        av_frame_free(&frame);
-        return AVERROR(ENOMEM);
-    }
-
-#endif
-
-    if (!frame) {
-#if CONFIG_AVFILTER
-        avfilter_graph_free(&graph);
-#endif
-        return AVERROR(ENOMEM);
-    }
-
-    for (;;) {
-        ret = get_video_frame(is, frame);
-        if (ret < 0)
-            goto the_end;
-        if (!ret)
-            continue;
+    {
+        double pts;
+        double duration;
+        int ret;
+        AVRational tb;
+
+        ret = 0;
+        while (!ret) {
+            ret = get_video_frame(is, frame);
+            if (ret < 0)
+                return ret;
+        }
 
 #if CONFIG_AVFILTER
-        if (   last_w != frame->width
-            || last_h != frame->height
-            || last_format != frame->format
-            || last_serial != is->viddec.pkt_serial
-            || last_vfilter_idx != is->vfilter_idx) {
+        if (   is->last_w != frame->width
+            || is->last_h != frame->height
+            || is->last_format != frame->format
+            || is->last_vserial != is->viddec.pkt_serial
+            || is->last_vfilter_idx != is->vfilter_idx) {
             av_log(NULL, AV_LOG_DEBUG,
                    "Video frame changed from size:%dx%d format:%s serial:%d to size:%dx%d format:%s serial:%d\n",
-                   last_w, last_h,
-                   (const char *)av_x_if_null(av_get_pix_fmt_name(last_format), "none"), last_serial,
+                   is->last_w, is->last_h,
+                   (const char *)av_x_if_null(av_get_pix_fmt_name(is->last_format), "none"), is->last_vserial,
                    frame->width, frame->height,
                    (const char *)av_x_if_null(av_get_pix_fmt_name(frame->format), "none"), is->viddec.pkt_serial);
-            avfilter_graph_free(&graph);
-            graph = avfilter_graph_alloc();
-            if ((ret = configure_video_filters(graph, is, vfilters_list ? vfilters_list[is->vfilter_idx] : NULL, frame)) < 0) {
+            if ((ret = configure_video_filters(is, vfilters_list ? vfilters_list[is->vfilter_idx] : NULL, frame)) < 0) {
                 SDL_Event event;
                 event.type = FF_QUIT_EVENT;
                 event.user.data1 = is;
                 SDL_PushEvent(&event);
-                goto the_end;
+                return ret;
             }
-            filt_in  = is->in_video_filter;
-            filt_out = is->out_video_filter;
-            last_w = frame->width;
-            last_h = frame->height;
-            last_format = frame->format;
-            last_serial = is->viddec.pkt_serial;
-            last_vfilter_idx = is->vfilter_idx;
-            frame_rate = filt_out->inputs[0]->frame_rate;
+            is->last_w = frame->width;
+            is->last_h = frame->height;
+            is->last_format = frame->format;
+            is->last_vserial = is->viddec.pkt_serial;
+            is->last_vfilter_idx = is->vfilter_idx;
+            is->frame_rate = is->out_video_filter->inputs[0]->frame_rate;
         }
 
-        ret = av_buffersrc_add_frame(filt_in, frame);
+        ret = av_buffersrc_add_frame(is->in_video_filter, frame);
         if (ret < 0)
-            goto the_end;
+            return ret;
 
         while (ret >= 0) {
             is->frame_last_returned_time = av_gettime_relative() / 1000000.0;
 
-            ret = av_buffersink_get_frame_flags(filt_out, frame, 0);
+            ret = av_buffersink_get_frame_flags(is->out_video_filter, frame, 0);
             if (ret < 0) {
                 if (ret == AVERROR_EOF)
                     is->viddec.finished = is->viddec.pkt_serial;
@@ -2453,9 +2444,11 @@
             is->frame_last_filter_delay = av_gettime_relative() / 1000000.0 - is->frame_last_returned_time;
             if (fabs(is->frame_last_filter_delay) > AV_NOSYNC_THRESHOLD / 10.0)
                 is->frame_last_filter_delay = 0;
-            tb = filt_out->inputs[0]->time_base;
+            tb = is->out_video_filter->inputs[0]->time_base;
+#else
+            tb = is->video_st->time_base;
 #endif
-            duration = (frame_rate.num && frame_rate.den ? av_q2d((AVRational){frame_rate.den, frame_rate.num}) : 0);
+            duration = (is->frame_rate.num && is->frame_rate.den ? av_q2d((AVRational){is->frame_rate.den, is->frame_rate.num}) : 0);
             pts = (frame->pts == AV_NOPTS_VALUE) ? NAN : frame->pts * av_q2d(tb);
             ret = queue_picture(is, frame, pts, duration, av_frame_get_pkt_pos(frame), is->viddec.pkt_serial);
             av_frame_unref(frame);
@@ -2463,32 +2456,48 @@
         }
 #endif
 
+        return ret;
+    }
+}
+
+static int video_thread(void *arg)
+{
+    VideoState *is = arg;
+    AVFrame *frame = av_frame_alloc();
+
+    if (!frame) {
+        return AVERROR(ENOMEM);
+    }
+
+    
+    for (;;) {
+        int ret = video_thread_iter(is, frame);
+
         if (ret < 0)
             goto the_end;
     }
  the_end:
 #if CONFIG_AVFILTER
-    avfilter_graph_free(&graph);
+    avfilter_graph_free(&is->vgraph);
 #endif
     av_frame_free(&frame);
     return 0;
 }
 
 #ifdef SUBTITLE
-static int subtitle_thread(void *arg)
+static int subtitle_thread_iter(VideoState *is)
 {
-    VideoState *is = arg;
     Frame *sp;
     int got_subtitle;
     double pts;
     int i;
 
-    for (;;) {
+    {
         if (!(sp = frame_queue_peek_writable(&is->subpq)))
-            return 0;
+            return -1;
 
         if ((got_subtitle = decoder_decode_frame(&is->subdec, NULL, &sp->sub)) < 0)
-            break;
+            return -1;
 
         pts = 0;
 
@@ -2542,6 +2551,20 @@
     }
     return 0;
 }
+
+static int subtitle_thread(void *arg)
+{
+    VideoState *is = arg;
+
+    for (;;) {
+        int ret = subtitle_thread_iter(is);
+
+        if (ret < 0)
+            goto the_end;
+    }
+ the_end:
+    return 0;
+}
 #endif
 
 #ifdef AUDIO
@@ -2981,6 +3004,9 @@
             is->auddec.start_pts = is->audio_st->start_time;
             is->auddec.start_pts_tb = is->audio_st->time_base;
         }
+#if CONFIG_AVFILTER
+        is->last_aserial = -1;
+#endif
         if ((ret = decoder_start(&is->auddec, audio_thread, is)) < 0)
             goto out;
         SDL_PauseAudio(0);
@@ -2993,6 +3019,16 @@
         is->viddec_width  = avctx->width;
         is->viddec_height = avctx->height;
 
+        is->frame_rate = av_guess_frame_rate(is->ic, is->video_st, NULL);
+
+#if CONFIG_AVFILTER
+        is->last_w = 0;
+        is->last_h = 0;
+        is->last_format = -2;
+        is->last_vserial = -1;
+        is->last_vfilter_idx = 0;
+#endif
+
         decoder_init(&is->viddec, avctx, &is->videoq, is->continue_read_thread);
         if ((ret = decoder_start(&is->viddec, video_thread, is)) < 0)
             goto out;
